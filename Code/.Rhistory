summarise(has_pregnancy_fibroids = ifelse(sum(grepl("pregnancy|partum", tolower(event_name)))>=1, TRUE, FALSE),
.groups='drop') %>%
summary()
summary(confident_endo_dx)
# look at those who are not confident Dx
df2 %>%
filter(pat_id %in% confident_endo_dx$pat_id[which(!confident_endo_dx$confident_dx)]) %>%
View()
# look at all dx_names
table(uf_endo_cohort$dx_name[which(grepl('N80', uf_endo_cohort$icd10) & !grepl('N80.03', uf_endo_cohort$icd10))])
# look at all dx_names
endo_dx_names <- table(uf_endo_cohort$dx_name[which(grepl('N80', uf_endo_cohort$icd10) & !grepl('N80.03', uf_endo_cohort$icd10))])
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', uf_endo_cohort$icd10) & !grepl('N80.03', uf_endo_cohort$icd10)) %>%
group_by(dx_name) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name)),
.groups='drop') %>%
View()
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10)) %>%
group_by(dx_name) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name)),
.groups='drop')
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10)) %>%
group_by(dx_name) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name), TRUE, FALSE),
.groups='drop')
View(endo_dx_names)
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10)) %>%
group_by(dx_name) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name), TRUE, FALSE),
.groups='drop') %>%
distinct()
View(endo_dx_names)
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10)) %>%
group_by(dx_namem icd10) %>%
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10)) %>%
group_by(dx_name, icd10) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name), TRUE, FALSE),
.groups='drop') %>%
distinct()
endo_dx_unique <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name) & !is.na(dx_date)) %>%
rename(date=dx_date) %>%
select(-referral_id, -icd10, -dx_date_filled, -pat_enc_csn_id) %>%
group_by(pat_id, date) %>%
summarise(event_name = paste0(unique(dx_name), collapse=', '),
event_type = paste0(unique(dx_type), collapse=', '),
.groups='drop')
endo_all_long <- bind_rows(endo_dx_unique, imaging_unique, surgery_unique) %>%
distinct() %>%
arrange(pat_id, date)
n_endo_raw <- length(unique(endo_dx_unique$pat_id))
n_endo_raw
endo_first_dx <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name) & !is.na(dx_date)) %>%
group_by(pat_id) %>%
filter(dx_date==min(dx_date)) %>%
summarise(first_dx_date = mean(dx_date),
first_dx_type = paste0(unique(dx_type), collapse = ';'),
.groups='drop') %>%
left_join(pat_cohort %>%
select(pat_id, index_enc_date, final_censor_date, final_censor_type, ltfu_status, ltfu_reengage_date)
, by="pat_id") %>%
mutate(time_to_first_dx = difftime(first_dx_date, index_enc_date, units="days"))
endo_first_dx %>%
group_by(first_dx_date) %>%
summarise(count=n(), .groups='drop') %>%
mutate(cumulative_count = cumsum(count)) %>%
ggplot(data=., aes(x=first_dx_date, y=cumulative_count)) +
geom_line() +
ylab('Cumulative Count of Patients Diagnosed with Endo') +
xlab('Date of Diagnosis') +
theme_bw()
endo_first_dx %>%
mutate(medical_hx = case_when(grepl('Medical History', first_dx_type)~TRUE, TRUE~FALSE),
encounter = case_when(grepl('Encounter Diagnosis', first_dx_type)~TRUE, TRUE~FALSE),
problem_list = case_when(grepl('Problem List', first_dx_type)~TRUE, TRUE~FALSE),
hospital_dx = case_when(grepl('Hospital Account Diagnosis', first_dx_type)~TRUE, TRUE~FALSE),
referral_dx = case_when(grepl('Referral Diagnosis', first_dx_type)~TRUE, TRUE~FALSE)) %>%
CreateTableOne(data=., vars = c('referral_dx', 'encounter', 'medical_hx', 'problem_list', 'hospital_dx'))
endo_first_dx %>%
# only for those diagnosed under 6 months
ggplot(data=., aes(x=time_to_first_dx)) +
geom_histogram(fill='lavender', color='black', binwidth=30) +
xlab('Days between Index Encounter and First Endo Dx') +
theme_bw()
endo_first_dx %>%
filter(first_dx_date > final_censor_date) %>%
CreateTableOne(data=., vars='final_censor_type')
tab <- endo_first_dx %>%
filter(first_dx_date > final_censor_date & final_censor_type == 'LTFU') %>%
mutate(ltfu_status = factor(ltfu_status)) %>%
CreateTableOne(data=., vars='ltfu_status')
print(tab, showAllLevels=TRUE)
endo_first_dx %>%
filter(first_dx_date > final_censor_date & final_censor_type == 'LTFU' & ltfu_status=='partial') %>%
mutate(reengage_prior_to_dx = as.numeric(difftime(first_dx_date, ltfu_reengage_date, units='days'))) %>%
ggplot(data=., aes(x=reengage_prior_to_dx)) +
geom_histogram(fill='lightpink', color='black', binwidth=30) +
xlab("Days between First Endo Diagnosis date and Re-Engagement in relevant care") +
theme_bw()
endo_first_dx %>%
filter(first_dx_date > final_censor_date & final_censor_type == 'LTFU') %>%
mutate(medical_hx = case_when(grepl('Medical History', first_dx_type)~TRUE, TRUE~FALSE),
encounter = case_when(grepl('Encounter Diagnosis', first_dx_type)~TRUE, TRUE~FALSE),
problem_list = case_when(grepl('Problem List', first_dx_type)~TRUE, TRUE~FALSE),
hospital_dx = case_when(grepl('Hospital Account Diagnosis', first_dx_type)~TRUE, TRUE~FALSE),
referral_dx = case_when(grepl('Referral Diagnosis', first_dx_type)~TRUE, TRUE~FALSE)) %>%
CreateTableOne(data=., vars = c('referral_dx', 'encounter', 'medical_hx', 'problem_list', 'hospital_dx'))
endo_dx_count <- endo_all_long %>%
mutate(referral_dx=ifelse(grepl('Referral Diagnosis', event_type), TRUE, FALSE),
medical_hx=ifelse(event_type == 'Medical History', TRUE, FALSE)) %>%
group_by(pat_id) %>%
summarise(dx_count = sum(grepl('Diagnosis|Problem|History', event_type)),
referral_count = sum(referral_dx),
all_medical_hx = ifelse(n()==sum(medical_hx), TRUE, FALSE),
.groups='drop')
ggplot(data=endo_dx_count, aes(x=dx_count)) +
geom_histogram(fill='lightblue', color='black', binwidth = 1) +
xlab('Number of Endo Dx per patient') +
theme_bw()
# look for patients who ONLY ever have medical history code drops (no procedures)
endo_only_medical_hx <- endo_all_long %>%
group_by(pat_id) %>%
summarise(all_medical_hx = ifelse(n()==sum(event_type == 'Medical History'), TRUE, FALSE),
.groups='drop')
# are these patients generally older
pat_cohort %>%
filter(pat_id %in% endo_only_medical_hx$pat_id[which(endo_only_medical_hx$all_medical_hx)]) %>%
ggplot(data=., aes(x=age_20160801)) +
geom_histogram(fill='lightyellow', color='black', binwidth=5) +
xlab('Age at basline') +
theme_bw()
# look at younger patients in this subgroup
endo_all_long %>%
filter(pat_id %in% endo_only_medical_hx$pat_id[which(endo_only_medical_hx$all_medical_hx)]) %>%
# want to know if these are older patients
left_join(pat_cohort, by='pat_id') %>%
filter(age_20160801 < 35) %>%
View()
library(data.table)
df <- endo_all_long
setDT(df)
# indexing which rows are procedures
df$is_procedure <- grepl('Imaging|Surgery',df$event_type)
# indexing which rows are dx (ignore imaging Dx for now)
df$is_diagnosis <- grepl('Diagnosis|Problem|List|History',df$event_type) & !grepl('Imaging',df$event_type)
# rearrange so if a procedure and dx happen on the same day the procedure goes first
df <- arrange(df, pat_id, date, is_diagnosis, is_procedure)
# get the index of the next row that is a dx when the row is a procedure
df[,next_dx_index:=zoo::na.locf(NA^(!is_diagnosis)*.I, fromLast=T, na.rm=F)*NA^(!is_procedure), by=pat_id]
# find time difference between the date of procedure and the next Dx date
df <- df[,next_dx_time_interval:=difftime(date[next_dx_index], date, units="days")]
df <- df[,next_dx_name:=event_name[next_dx_index]]
df <- df[,next_dx_type:=event_type[next_dx_index]]
# check this works
#View(df)
# which are on the same day
length(which(df$next_dx_time_interval==0))
df2 <- as.data.frame(df) %>%
mutate(method = case_when(grepl('Surgery', event_type)~"Surgery",
grepl('Imaging', event_type)~"Imaging",
TRUE~NA))
df2 %>%
filter(!is.na(next_dx_time_interval)) %>%
group_by(pat_id) %>%
filter(next_dx_time_interval == min(next_dx_time_interval, na.rm=TRUE)) %>%
# in the case that there are multiple procedures with same margin, take the earlier one
filter(date == min(date, na.rm=TRUE)) %>%
ungroup() %>%
ggplot(data=., aes(x=next_dx_time_interval/30, fill=method)) +
xlab('Shortest Time between Dx procedure and next Dx code (months)') +
geom_histogram(binwidth = 5) +
facet_wrap(~method, scales = 'free_y') +
theme_bw()
confident_endo_dx <- endo_dx_unique %>%
distinct(pat_id) %>%
mutate(confident_dx = FALSE)
# grab ids for those who have any procedure with another diagnosis code within
ids <- unique(df2$pat_id[which(df2$next_dx_time_interval <= 180)])
# change their status in dataframe and add type
confident_endo_dx <- confident_endo_dx %>%
mutate(confident_dx = case_when(pat_id %in% ids~TRUE,
TRUE~confident_dx),
confirmed_via_procedure = case_when(pat_id %in% ids~TRUE,
TRUE~FALSE))
summary(confident_endo_dx)
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarise(count=n(),
has_location=ifelse(grepl('of|in', dx_name), TRUE, FALSE),
.groups='drop') %>%
distinct()
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarize(count=n(),
has_location=ifelse(grepl('of|in', dx_name), TRUE, FALSE),
.groups='drop') %>%
distinct()
?reframe
# location list
location_names <- c('bladder', 'cervical', 'ovar', 'tub', 'perito', 'umbilic', 'uterus')
paste0(location_names, sep='|')
?paste0
paste0(location_names, collapse='|')
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarize(count=n(),
has_location=ifelse(grepl(paste0(location_names, collapse='|'), dx_name), TRUE, FALSE),
.groups='drop') %>%
distinct()
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarize(count=n(),
has_location=ifelse(grepl(paste0(location_names, collapse='|'), lower(dx_name)), TRUE, FALSE),
.groups='drop') %>%
distinct()
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarize(count=n(),
has_location=ifelse(grepl(paste0(location_names, collapse='|'), tolower(dx_name)), TRUE, FALSE),
.groups='drop') %>%
distinct()
paste0(location_names, collapse='|')
cervical', 'ovar', 'tub', 'perito', 'umbilic', 'uterus', 'of', 'in')
# location list
location_names <- c('bladder', 'cervical', 'ovar', 'tub', 'perito', 'umbilic', 'uterus', 'of', 'in')
paste0(location_names, collapse='|')
# look at all dx_names
endo_dx_names <- uf_endo_cohort %>%
filter(grepl('N80', icd10) & !grepl('N80.03', icd10) & !grepl('adenomyosis', dx_name)) %>%
group_by(dx_name, icd10) %>%
summarize(count=n(),
has_location=ifelse(grepl(paste0(location_names, collapse='|'), tolower(dx_name)), TRUE, FALSE),
.groups='drop') %>%
distinct()
# extract location of the Endo based on Dx name if that exists
df2$location <- grepl(paste0(location_names, collapse='|'), tolower(df2$dx_name))
# extract location of the Endo based on Dx name if that exists
df2$location <- grepl(paste0(location_names, collapse='|'), tolower(df2$event_name))
# grab patients who have any Endo diagnosis with a location
# these could still be prevalent cases but we still assume these are true cases
ids <- unique(df2$pat_id[which(df2$location)])
## location is a strong indicator of confirmed Endo since we ASSUME location was ascertained through imaging at NYU or outside of NYU (referral)
df2 %>% filter(pat_id %in% ids) %>% View()
## add these to the confident_dx dataframe
confident_endo_dx <- confident_endo_dx %>%
mutate(confident_dx = case_when(pat_id %in% ids~TRUE,
TRUE~confident_dx),
location_of_fibroids = case_when(pat_id %in% ids~TRUE,
TRUE~FALSE))
summary(confident_endo_dx)
ids <- unique(df$pat_id[which(grepl("Problem|History", df$event_type[df$next_dx_index]) & df$next_dx_time_interval > 180)])
df2 %>% filter(pat_id %in% ids) %>% View()
## add these to the confident_dx dataframe
confident_endo_dx <- confident_endo_dx %>%
mutate(confident_dx = case_when(pat_id %in% ids~TRUE,
TRUE~confident_dx),
prevalent_dx_after_procedure = case_when(pat_id %in% ids~TRUE,
TRUE~FALSE))
summary(confident_endo_dx)
ids <- endo_dx_count$pat_id[which(endo_dx_count$referral_count > 1)]
df2 %>% filter(pat_id %in% ids) %>% View()
imaging_unique <- imaging_all %>%
filter(pat_id %in% endo_dx_unique$pat_id) %>%
mutate(date=as.Date(imaging_date)) %>%
group_by(pat_id, date)  %>%
summarise(event_name = paste0(unique(event_name), collapse=', '),
event_type = paste0(unique(event_type), collapse=', '),
.groups='drop')
surgery_unique <- surgery_all %>%
filter(pat_id %in% endo_dx_unique$pat_id) %>%
mutate(date = as.Date(surgery_date)) %>%
group_by(pat_id, date) %>%
summarise(event_name = paste0(unique(procedure_name), collapse=', '),
event_type = paste0(unique(type), collapse=', '),
.groups='drop')
endo_all_long <- bind_rows(endo_dx_unique, imaging_unique, surgery_unique) %>%
distinct() %>%
arrange(pat_id, date)
n_endo_raw <- length(unique(endo_dx_unique$pat_id))
n_endo_raw
endo_dx_count <- endo_all_long %>%
mutate(referral_dx=ifelse(grepl('Referral Diagnosis', event_type), TRUE, FALSE),
medical_hx=ifelse(event_type == 'Medical History', TRUE, FALSE)) %>%
group_by(pat_id) %>%
summarise(dx_count = sum(grepl('Diagnosis|Problem|History', event_type)),
referral_count = sum(referral_dx),
all_medical_hx = ifelse(n()==sum(medical_hx), TRUE, FALSE),
.groups='drop')
ggplot(data=endo_dx_count, aes(x=dx_count)) +
geom_histogram(fill='lightblue', color='black', binwidth = 1) +
xlab('Number of Endo Dx per patient') +
theme_bw()
# look for patients who ONLY ever have medical history code drops (no procedures)
endo_only_medical_hx <- endo_all_long %>%
group_by(pat_id) %>%
summarise(all_medical_hx = ifelse(n()==sum(event_type == 'Medical History'), TRUE, FALSE),
.groups='drop')
df <- endo_all_long
setDT(df)
# indexing which rows are procedures
df$is_procedure <- grepl('Imaging|Surgery',df$event_type)
# indexing which rows are dx (ignore imaging Dx for now)
df$is_diagnosis <- grepl('Diagnosis|Problem|List|History',df$event_type) & !grepl('Imaging',df$event_type)
# rearrange so if a procedure and dx happen on the same day the procedure goes first
df <- arrange(df, pat_id, date, is_diagnosis, is_procedure)
# get the index of the next row that is a dx when the row is a procedure
df[,next_dx_index:=zoo::na.locf(NA^(!is_diagnosis)*.I, fromLast=T, na.rm=F)*NA^(!is_procedure), by=pat_id]
# find time difference between the date of procedure and the next Dx date
df <- df[,next_dx_time_interval:=difftime(date[next_dx_index], date, units="days")]
df <- df[,next_dx_name:=event_name[next_dx_index]]
df <- df[,next_dx_type:=event_type[next_dx_index]]
# which are on the same day
length(which(df$next_dx_time_interval==0))
df2 <- as.data.frame(df) %>%
mutate(method = case_when(grepl('Surgery', event_type)~"Surgery",
grepl('Imaging', event_type)~"Imaging",
TRUE~NA))
df2 %>%
filter(!is.na(next_dx_time_interval)) %>%
group_by(pat_id) %>%
filter(next_dx_time_interval == min(next_dx_time_interval, na.rm=TRUE)) %>%
# in the case that there are multiple procedures with same margin, take the earlier one
filter(date == min(date, na.rm=TRUE)) %>%
ungroup() %>%
ggplot(data=., aes(x=next_dx_time_interval/30, fill=method)) +
xlab('Shortest Time between Dx procedure and next Dx code (months)') +
geom_histogram(binwidth = 5) +
facet_wrap(~method, scales = 'free_y') +
theme_bw()
# check out procedures followed by problem list/medical history drop
ids <- unique(df$pat_id[which(grepl("Problem|History", df$event_type[df$next_dx_index]) &
df$next_dx_time_interval > 180)])
df2 %>% filter(pat_id %in% ids) %>% View()
df2 %>%
filter(pat_id %in% ids &
!pat_id %in% confident_endo_dx$pat_id[which(confident_endo_dx$confident_dx)]) %>%
View()
length(which(ids %in% confident_endo_dx$pat_id[which(confident_endo_dx$confident_dx)]))
# look at those who are not confident Dx
df2 %>%
filter(pat_id %in% confident_endo_dx$pat_id[which(!confident_endo_dx$confident_dx)]) %>%
View()
# how many of these are only medical history diagnoses
confident_endo_dx %>%
left_join(endo_only_medical_hx, by='pat_id') %>%
filter(!confident_dx) %>%
summary()
# grab IDs of patients who never get any procedure during follow-up
ids <- confident_endo_dx$pat_id[which(!confident_endo_dx$confident_dx)]
# grab characteristics from the procedure dataframe
procedure_info <- df2 %>%
group_by(pat_id) %>%
summarise(
has_any_imaging=ifelse(sum(method=='Imaging', na.rm=TRUE)>=1, TRUE, FALSE),
has_any_surgery=ifelse(sum(method=='Surgery', na.rm=TRUE)>=1, TRUE, FALSE),
has_any_location=ifelse(sum(location, na.rm=TRUE)>=1, TRUE, FALSE),
shortest_procedure_dx_margin = ifelse((all(is.na(next_dx_time_interval))), NA,
min(next_dx_time_interval, na.rm = TRUE)),
.groups='drop')
# grab characteristics from the procedure dataframe
procedure_info <- df2 %>%
group_by(pat_id) %>%
summarise(
has_any_imaging=ifelse(sum(method=='Imaging', na.rm=TRUE)>=1, TRUE, FALSE),
has_any_surgery=ifelse(sum(method=='Surgery', na.rm=TRUE)>=1, TRUE, FALSE),
#has_any_location=ifelse(sum(location, na.rm=TRUE)>=1, TRUE, FALSE),
shortest_procedure_dx_margin = ifelse((all(is.na(next_dx_time_interval))), NA,
min(next_dx_time_interval, na.rm = TRUE)),
.groups='drop')
# grab characteristics from the procedure dataframe
procedure_info <- df2 %>%
group_by(pat_id) %>%
summarise(
has_any_imaging=ifelse(sum(method=='Imaging', na.rm=TRUE)>=1, TRUE, FALSE),
has_any_surgery=ifelse(sum(method=='Surgery', na.rm=TRUE)>=1, TRUE, FALSE),
#has_any_location=ifelse(sum(location, na.rm=TRUE)>=1, TRUE, FALSE),
shortest_procedure_dx_margin = ifelse((all(is.na(next_dx_time_interval))), NA,
min(next_dx_time_interval, na.rm = TRUE)),
.groups='drop')
# join together this and other information on these patients
df_not_confident <- endo_first_dx %>%
left_join(endo_dx_count, by='pat_id') %>%
left_join(procedure_info, by='pat_id') %>%
filter(pat_id %in% ids) %>%
mutate(time_to_first_dx=as.numeric(time_to_first_dx),
shortest_procedure_dx_margin=as.numeric(shortest_procedure_dx_margin),) %>%
mutate(dx_early_into_FU = ifelse(time_to_first_dx <= 180, TRUE, FALSE))
# look at overall characteristics
tab_not_confident <- CreateTableOne(data=df_not_confident,
vars=c("dx_early_into_FU", "dx_count", "referral_count", "all_medical_hx",
"has_any_surgery", "has_any_imaging",
"shortest_procedure_dx_margin"))
print(tab_not_confident,
nonnormal=c("dx_count", "referral_count", "shortest_procedure_dx_margin"),
showAllLevels = TRUE)
summary(df_not_confident$time_to_first_dx[which(df_not_confident$all_medical_hx)])
df_not_confident %>%
mutate(censored_before_dx = ifelse(first_dx_date >= final_censor_date, TRUE, FALSE)) %>%
CreateTableOne(data=., var=c('final_censor_type', 'censored_before_dx'), includeNA=TRUE)
# look at censoring among those with all medical history codes
df_not_confident %>%
filter(all_medical_hx) %>%
mutate(censored_before_dx = ifelse(first_dx_date >= final_censor_date, TRUE, FALSE)) %>%
CreateTableOne(data=., var=c('final_censor_type', 'censored_before_dx'), includeNA=TRUE)
# look at them
df_not_confident %>% filter(all_medical_hx==TRUE) %>% View()
# look at those diagnosed after LTFU censoring
df2 %>% filter(pat_id %in% df_not_confident$pat_id[which(df_not_confident$final_censor_type == 'LTFU')]) %>% View()
# look at those diagnosed after LTFU censoring
df2 %>%
filter(pat_id %in% df_not_confident$pat_id[which(df_not_confident$final_censor_type == 'LTFU')]) %>%
left_join(df_not_confident %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date, ltfu_status, ltfu_reengage_date),
by='pat_id')
# look at those diagnosed after LTFU censoring
df2 %>%
filter(pat_id %in% df_not_confident$pat_id[which(df_not_confident$final_censor_type == 'LTFU')]) %>%
left_join(df_not_confident %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date, ltfu_status, ltfu_reengage_date),
by='pat_id') %>%
View()
# look at those diagnosed after LTFU censoring
df2 %>%
filter(pat_id %in% df_not_confident$pat_id[which(df_not_confident$final_censor_type == 'LTFU')]) %>%
left_join(df_not_confident %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date, ltfu_status, ltfu_reengage_date),
by='pat_id') %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date,
ltfu_status, ltfu_reengage_date, date, event_name, event_type) %>%
View()
# look at those diagnosed after LTFU censoring
df2 %>%
filter(pat_id %in% df_not_confident$pat_id[which(df_not_confident$final_censor_type == 'LTFU')]) %>%
left_join(df_not_confident %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date, ltfu_status, ltfu_reengage_date),
by='pat_id') %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date,
ltfu_status, ltfu_reengage_date, date, event_name, event_type) %>%
arrange(pat_id, date) %>%
View()
length(which(df_not_confident$first_dx_date>=df_not_confident$ltfu_reengage_date))
ids <- df_not_confident$pat_id[which(df_not_confident$first_dx_date>=df_not_confident$ltfu_reengage_date)]
# look at them
df2 %>%
filter(pat_id %in% ids) %>%
left_join(df_not_confident %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date, ltfu_status, ltfu_reengage_date),
by='pat_id') %>%
select(pat_id, index_enc_date, first_dx_date, final_censor_date,
ltfu_status, ltfu_reengage_date, date, event_name, event_type) %>%
arrange(pat_id, date) %>%
View()
# add to the confident_dx dataframe
confident_endo_dx <- confident_endo_dx %>%
mutate(confident_dx = case_when(pat_id %in% ids~TRUE,
TRUE~confident_dx),
dx_after_partial_LTFU = case_when(pat_id %in% ids~TRUE,
TRUE~FALSE))
summary(confident_endo_dx)
# grab IDs of patients who never get any procedure during follow-up
ids <- confident_endo_dx$pat_id[which(!confident_endo_dx$confident_dx)]
# join together this and other information on these patients
df_not_confident <- endo_first_dx %>%
left_join(endo_dx_count, by='pat_id') %>%
left_join(procedure_info, by='pat_id') %>%
filter(pat_id %in% ids) %>%
mutate(time_to_first_dx=as.numeric(time_to_first_dx),
shortest_procedure_dx_margin=as.numeric(shortest_procedure_dx_margin),) %>%
mutate(dx_early_into_FU = ifelse(time_to_first_dx <= 180, TRUE, FALSE))
# look at overall characteristics
tab_not_confident <- CreateTableOne(data=df_not_confident,
vars=c("dx_early_into_FU", "dx_count", "referral_count", "all_medical_hx",
"has_any_surgery", "has_any_imaging",
"shortest_procedure_dx_margin"))
print(tab_not_confident,
nonnormal=c("dx_count", "referral_count", "shortest_procedure_dx_margin"),
showAllLevels = TRUE)
summary(df_not_confident$time_to_first_dx[which(df_not_confident$all_medical_hx)])
df_not_confident %>%
mutate(censored_before_dx = ifelse(first_dx_date >= final_censor_date, TRUE, FALSE)) %>%
CreateTableOne(data=., var=c('final_censor_type', 'censored_before_dx'), includeNA=TRUE)
df_not_confident %>%
mutate(censored_before_dx = ifelse(first_dx_date >= final_censor_date, TRUE, FALSE)) %>%
CreateTableOne(data=., var=c('final_censor_type', 'censored_before_dx', 'ltfu_status'), includeNA=TRUE)
